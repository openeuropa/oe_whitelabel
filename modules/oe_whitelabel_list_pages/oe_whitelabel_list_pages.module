<?php

/**
 * @file
 * OE Whitelabel List Pages module.
 */

declare(strict_types=1);

use Drupal\Core\Cache\CacheableMetadata;
use Drupal\Core\Form\FormStateInterface;
use Drupal\media\MediaInterface;
use Drupal\media\Plugin\media\Source\Image;
use Drupal\media_avportal\Plugin\media\Source\MediaAvPortalPhotoSource;
use Drupal\oe_bootstrap_theme\ValueObject\ImageValueObject;

/**
 * Implements hook_form_FORM_ID_alter() for facets_forms.
 */
function oe_whitelabel_list_pages_form_oe_list_pages_facets_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['actions'])) {
    $action_classes = ['mt-4', 'd-grid', 'gap-4', 'd-md-block'];
    $form['actions']['#attributes']['class'] = array_unique(array_merge($form['actions']['#attributes']['class'] ?? [], $action_classes));
  }
  if (isset($form['actions']['submit'])) {
    $submit_classes = ['me-md-3', 'btn', 'btn-primary', 'btn-md'];
    $form['actions']['submit']['#attributes']['class'] = array_unique(array_merge($form['actions']['submit']['#attributes']['class'] ?? [], $submit_classes));
  }
  if (isset($form['actions']['reset'])) {
    $reset_classes = ['btn', 'btn-light', 'btn-md'];
    $form['actions']['reset']['#attributes']['class'] = array_unique(array_merge($form['actions']['reset']['#attributes']['class'] ?? [], $reset_classes));
  }
}

/**
 * Implements template_preprocess_node() for the List pages node type.
 */
function oe_whitelabel_list_pages_preprocess_node__oe_list_page(&$variables) {
  if ($variables['view_mode'] !== 'full') {
    return;
  }

  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'];

  // Bail out if there is no media present.
  if ($node->get('oe_featured_media')->isEmpty()) {
    return;
  }

  /** @var \Drupal\media\Entity\Media $media */
  $media = $node->get('oe_featured_media')->entity;
  if (!$media instanceof MediaInterface) {
    // The media entity is not available anymore, bail out.
    return;
  }

  // Retrieve the correct media translation.
  /** @var \Drupal\media\Entity\Media $media */
  $media = \Drupal::service('entity.repository')->getTranslationFromContext($media, $node->language()->getId());

  // Caches are handled by the formatter usually. Since we are not rendering
  // the original render arrays, we need to propagate our caches to the
  // paragraph template.
  $cacheability = CacheableMetadata::createFromRenderArray($variables);
  $cacheability->addCacheableDependency($media);

  // Run access checks on the media entity.
  $access = $media->access('view', $variables['user'], TRUE);
  $cacheability->addCacheableDependency($access);
  if (!$access->isAllowed()) {
    $cacheability->applyTo($variables);
    return;
  }

  // Get the media source.
  $source = $media->getSource();

  $is_image = $source instanceof MediaAvPortalPhotoSource || $source instanceof Image;

  // If it's not an image and not a video, bail out.
  if (!$is_image) {
    $cacheability->applyTo($variables);
    return;
  }

  $thumbnail = $media->get('thumbnail')->first();
  $variables['image'] = ImageValueObject::fromImageItem($thumbnail);

  $cacheability->applyTo($variables);
}
