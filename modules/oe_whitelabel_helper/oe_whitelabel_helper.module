<?php

/**
 * @file
 * The OE Whitelabel Helper module.
 */

declare(strict_types = 1);

use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FormatterInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_locale_translation_projects_alter().
 */
function oe_whitelabel_helper_locale_translation_projects_alter(&$projects) {
  $projects['oe_whitelabel_helper']['info']['interface translation server pattern'] = \Drupal::service('extension.list.module')->getPath('oe_whitelabel_helper') . '/translations/%project-%language.po';
}

/**
 * Implements hook_theme().
 */
function oe_whitelabel_helper_theme($existing, $type, $theme, $path) {
  return [
    'oe_whitelabel_helper_address_inline' => [
      'variables' => [
        'address' => NULL,
        'address_items' => [],
        'address_delimiter' => NULL,
      ],
    ],
    'oe_whitelabel_helper_country_flag' => [
      'variables' => [
        'country_code' => NULL,
        'attributes' => [],
      ],
    ],
    'oe_corporate_blocks_neutral_footer' => [
      'variables' => [
        'corporate_footer' => [],
        'site_specific_footer' => [],
      ],
      'preprocess functions' => [
        'oe_corporate_blocks_preprocess_set_site_owner',
      ],
    ],
  ];
}

/**
 * Implements hook_field_formatter_third_party_settings_form().
 */
function oe_whitelabel_helper_field_formatter_third_party_settings_form(FormatterInterface $plugin, FieldDefinitionInterface $field_definition, $view_mode, array $form, FormStateInterface $form_state) {
  $element = [];

  if ($view_mode !== 'oe_w_pattern_gallery_item') {
    return $element;
  }

  $element['pattern_mapping'] = [
    '#type' => 'select',
    '#title' => t('Use this field for'),
    '#options' => [
      'caption_title' => t('Caption title'),
      'caption' => t('Caption'),
      'thumbnail' => t('Thumbnail'),
      'media' => t('Media'),
    ],
    '#empty_value' => '',
    '#default_value' => $plugin->getThirdPartySetting('oe_whitelabel_helper', 'pattern_mapping', ''),
  ];

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function oe_whitelabel_helper_field_formatter_settings_summary_alter(array &$summary, array $context) {
  if ($context['view_mode'] !== 'oe_w_pattern_gallery_item') {
    return;
  }

  $mapping = $context['formatter']->getThirdPartySetting('oe_whitelabel_helper', 'pattern_mapping');
  if ($mapping) {
    // @todo We should show labels.
    $summary[] = t('Gallery pattern: mapped to @field.', [
      '@field' => $mapping,
    ]);
  }
}

/**
 * Implements hook_requirements_alter().
 */
function oe_whitelabel_helper_requirements_alter(array &$requirements): void {
  if (isset($requirements['slim_select_library'])) {
    $theme_handler = \Drupal::service('theme_handler');
    $theme_path = $theme_handler->getTheme('oe_bootstrap_theme')->getPath();
    $path = '/' . $theme_path . '/assets/js/slimselect.min.js';
    $requirements['slim_select_library'] = [
      'title' => t('Slim Select library'),
      'severity' => REQUIREMENT_OK,
      'value' => t('Library available at :path.', [
        ':path' => $path,
      ]),
    ];
  }
}

/**
 * Default preprocess function for oe_whitelabel_helper_country_flag.
 *
 * @param array $variables
 *   The variables array.
 */
function template_preprocess_oe_whitelabel_helper_country_flag(array &$variables): void {
  $theme_extension_list = \Drupal::service('extension.list.theme');

  $variables['attributes']['class'][] = 'icon--fluid';

  $image_uri = $theme_extension_list->getPath('oe_whitelabel') . '/assets/icons/world-flags/' . strtolower($variables['country_code']) . '.svg';
  $variables['image'] = [
    '#theme' => 'image__country_flag',
    '#uri' => $image_uri,
    '#attributes' => $variables['attributes'],
  ];
}
