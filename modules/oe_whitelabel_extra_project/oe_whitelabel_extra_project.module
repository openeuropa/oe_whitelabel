<?php

/**
 * @file
 * OE Whitelabel theme extra project.
 */

declare(strict_types =  1);

use Drupal\Core\Cache\CacheableMetadata;
use Drupal\media\MediaInterface;
use Drupal\media\Plugin\media\Source\Image;
use Drupal\media_avportal\Plugin\media\Source\MediaAvPortalPhotoSource;
use Drupal\oe_bootstrap_theme\ValueObject\ImageValueObject;
use Drupal\Component\Utility\Html;

/**
 * Implements template_preprocess_node() for the project node type.
 */
function oe_whitelabel_extra_project_preprocess_node__oe_project(&$variables) {
  if ($variables['view_mode'] !== 'full' && $variables['view_mode'] !== 'teaser') {
    return;
  }
  _oe_whitelabel_extra_project_preprocess_featured_media($variables);
  _oe_whitelabel_extra_project_preprocess_inpage_nav($variables);
}

/**
 * Implements hook_preprocess().
 */
function _oe_whitelabel_extra_project_preprocess_featured_media(&$variables) {
  if ($variables['view_mode'] !== 'full' && $variables['view_mode'] !== 'teaser') {
    return;
  }

  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'];

  // Bail out if there is no media present.
  if ($node->get('oe_featured_media')->isEmpty()) {
    return;
  }

  /** @var \Drupal\media\Entity\Media $media */
  $media = $node->get('oe_featured_media')->entity;
  if (!$media instanceof MediaInterface) {
    // The media entity is not available anymore, bail out.
    return;
  }

  // Retrieve the correct media translation.
  /** @var \Drupal\media\Entity\Media $media */
  $media = \Drupal::service('entity.repository')->getTranslationFromContext($media, $node->language()->getId());

  // Caches are handled by the formatter usually. Since we are not rendering
  // the original render arrays, we need to propagate our caches to the
  // paragraph template.
  $cacheability = CacheableMetadata::createFromRenderArray($variables);
  $cacheability->addCacheableDependency($media);

  // Run access checks on the media entity.
  $access = $media->access('view', $variables['user'], TRUE);
  $cacheability->addCacheableDependency($access);
  if (!$access->isAllowed()) {
    $cacheability->applyTo($variables);
    return;
  }

  // Get the media source.
  $source = $media->getSource();

  $is_image = $source instanceof MediaAvPortalPhotoSource || $source instanceof Image;

  // If it's not an image and not a video, bail out.
  if (!$is_image) {
    $cacheability->applyTo($variables);
    return;
  }

  $thumbnail = $media->get('thumbnail')->first();
  $variables['image'] = ImageValueObject::fromImageItem($thumbnail);

  if ($variables['view_mode'] == 'teaser') {
    $variables['image'] = ['#markup' => $variables['image']->getSource()];
  }

  $cacheability->applyTo($variables);
}

/**
 * Helper function to preprocess the inpage navigation pattern fields.
 *
 * @param array $variables
 *   Render array variables.
 */
function _oe_whitelabel_extra_project_preprocess_inpage_nav(array &$variables): void {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'];

  $variables['inpage_navigation_links'] = [];
  $fields = [
    'oe_project_dates',
    'oe_summary',
    'oe_cx_objective',
    'oe_cx_impacts',
    'oe_project_participants',
    'oe_cx_achievements_and_milestone',
  ];
  foreach ($variables['content'] as &$item) {
    if (!array_key_exists('#field_name', $item)) {
      continue;
    }

    if (!in_array($item['#field_name'], $fields)) {
      continue;
    }

    $unique_id = Html::getUniqueId('oe-project--' . $item['#field_name']);
    $item['#attributes'] = ['id' => $unique_id];
    $variables['inpage_navigation_links'][] = [
      'path' => '#' . $unique_id,
      'label' => $node->{$item['#field_name']}->getFieldDefinition()->getLabel(),
    ];
  }

}
