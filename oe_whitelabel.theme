<?php

/**
 * @file
 * Functions to support theming.
 */

declare(strict_types = 1);

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\oe_bootstrap_theme_helper\EuropeanUnionLanguages;
use Drupal\oe_whitelabel\DocumentMediaWrapper;

// Include all files from the includes directory.
$includes_path = __DIR__ . '/includes/*.inc';
foreach (glob($includes_path) as $filename) {
  // The inspection disallowing basename() is not relevant for known paths.
  // phpcs:ignore QualityAssurance.Functions.DrupalWrappers.FoundWithAlternative
  require_once __DIR__ . '/includes/' . basename($filename);
}

/**
 * Implements hook_form_FORM_ID_alter() for facets_forms.
 */
function oe_whitelabel_form_facets_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['actions'])) {
    $action_classes = ['mt-4', 'd-grid', 'gap-4', 'd-md-block'];
    foreach ($action_classes as $action_class) {
      if (!isset($action_class, $form['actions']['#attributes']['class']) || !in_array($action_class, $form['actions']['#attributes']['class'], TRUE)) {
        $form['actions']['#attributes']['class'][] = $action_class;
      }
    }
  }
  if (isset($form['actions']['submit'])) {
    $submit_classes = ['me-md-3', 'btn', 'btn-primary', 'btn-md'];
    foreach ($submit_classes as $submit_class) {
      if (!isset($submit_class, $form['actions']['submit']['#attributes']['class']) || !in_array($submit_class, $form['actions']['submit']['#attributes']['class'], TRUE)) {
        $form['actions']['submit']['#attributes']['class'][] = $submit_class;
      }
    }
  }
  if (isset($form['actions']['reset'])) {
    $reset_classes = ['btn', 'btn-light', 'btn-md'];
    foreach ($reset_classes as $reset_class) {
      if (!isset($form['actions']['reset']['#attributes']['class']) || !in_array($reset_class, $form['actions']['reset']['#attributes']['class'], TRUE)) {
        $form['actions']['reset']['#attributes']['class'][] = $reset_class;
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function oe_whitelabel_form_system_theme_settings_alter(&$form, FormStateInterface &$form_state, $form_id = NULL) {
  $form['component_library'] = [
    '#type' => 'select',
    '#title' => t('Component library'),
    '#options' => [
      'neutral' => t('Neutral'),
      'ec' => t('European Commission'),
      'eu' => t('European Union'),
    ],
    '#default_value' => theme_get_setting('component_library') ?? 'neutral',
    '#description' => t('Choose "European Commission" for websites hosted under the ec.europa.eu domain and "European Union" for websites hosted under the europa.eu domain.'),
  ];
  $form['header_style'] = [
    '#type' => 'select',
    '#title' => t('Background style'),
    '#options' => [
      'standard' => t('Blue header'),
      'light' => t('Light header'),
    ],
    '#default_value' => theme_get_setting('header_style'),
    '#description' => t('Choose the header color'),
  ];
}

/**
 * Implements hook_preprocess().
 */
function oe_whitelabel_preprocess(&$variables) {
  $variables['bcl_component_library'] = theme_get_setting('component_library') ?? 'neutral';
  $variables['bcl_header_style'] = theme_get_setting('header_style') ?? 'standard';
  $variables['current_language_id'] = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $variables['bcl_logo_path'] = base_path() . drupal_get_path('theme', 'oe_bootstrap_theme') . '/assets/logos/';
}

/**
 * Implements hook_preprocess_page().
 */
function oe_whitelabel_preprocess_page(&$variables) {
  if ($variables['bcl_component_library'] === 'ec') {
    $variables['logo_aria_label'] = t('Home') . ' - ' . t('European Commission');
    $variables['site_logo_alt'] = t('European Commission logo');
    $variables['site_logo_title'] = t('European Commission');
    $site_logo_href = 'https://ec.europa.eu/info';
  }
  elseif ($variables['bcl_component_library'] === 'eu') {
    $variables['logo_aria_label'] = t('Home - European Union');
    $variables['site_logo_alt'] = t('European Union flag');
    $variables['site_logo_title'] = t('European Union');
    $site_logo_href = 'https://european-union.europa.eu';
  }
  else {
    $site_config = \Drupal::config('system.site');
    $variables['site_name'] = $site_config->get('name');
    $variables['site_logo_url'] = file_url_transform_relative(file_create_url(theme_get_setting('logo.url')));
    $variables['logo_aria_label'] = t('Home');
    $variables['site_logo_alt'] = t('Home logo');
    $variables['site_logo_title'] = t('Home');
    $site_logo_href = Url::fromRoute('<front>')->toString();
  }

  if ($variables['bcl_component_library'] === 'neutral') {
    return;
  }
  // Provide correct icon for non-eu languages.
  $language_code = \Drupal::languageManager()->getCurrentLanguage()->getId();
  if (!EuropeanUnionLanguages::hasLanguage($language_code)) {
    if ($language_code === 'nb') {
      // Set correct icon for Norwegian language.
      $variables['current_language_id'] = 'no';
    }
    else {
      // Check whether BCL provides a logo for the language.
      $bcl_logo = $variables['bcl_logo_path'] . '/' . $variables['bcl_component_library'] . '/';
      $bcl_logo .= 'logo-' . $variables['bcl_component_library'] . '--' . $language_code . '.svg';
      if (!file_exists($bcl_logo)) {
        // Provide fallback "en" icon if language logo doesn't exist.
        $variables['current_language_id'] = 'en';
      }
    }
  }
  else {
    $site_logo_href .= '/index_' . EuropeanUnionLanguages::getInternalLanguageCode($variables['current_language_id']);
  }
  $variables['site_logo_href'] = $site_logo_href;
}

/**
 * Implements hook_preprocess_HOOK() for document media bundle.
 */
function oe_whitelabel_preprocess_media__document__default(&$variables) {
  /** @var \Drupal\media\Entity\Media $media */
  $media = $variables['media'];

  $wrapper = new DocumentMediaWrapper($media);
  if ($wrapper->isEmpty()) {
    return;
  }

  $variables['file'] = $wrapper->toFileValueObject();

  // Generate the file information for all available translations.
  foreach ($media->getTranslationLanguages() as $langcode => $language) {
    // We don't want to include the information of the current language again.
    if ($media->language()->getId() === $langcode) {
      continue;
    }

    $translation = $media->getTranslation($langcode);
    $wrapper = new DocumentMediaWrapper($translation);
    if ($wrapper->isEmpty()) {
      continue;
    }
    $variables['translations'][] = $wrapper->toFileValueObject();
  }
}
